{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "577587a8-af04-48a9-9154-b2bd0203b963",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import time\n",
    "import shutil\n",
    "import tkinter as tk\n",
    "from datetime import datetime\n",
    "\n",
    "\n",
    "class ReturnalGame:\n",
    "    def __init__(self):\n",
    "        self.returnal_folder = os.path.join(os.environ['USERPROFILE'], 'AppData\\Local\\Returnal\\Steam\\Saved\\\\')\n",
    "        self.backup_folder = self.returnal_folder+'Backup'\n",
    "\n",
    "    def check_current_saved(self):\n",
    "        file_path = os.path.join(self.returnal_folder, 'SaveGames', 'saveprofile.sav')\n",
    "        if os.path.exists(file_path):\n",
    "            mod_time = os.path.getmtime(file_path)\n",
    "            mod_time_str = time.ctime(mod_time)\n",
    "            mod_time_dt = datetime.fromtimestamp(mod_time)\n",
    "            print(f\"Current Returnal Saved Game is from {mod_time_str}.\")\n",
    "            return mod_time_dt\n",
    "        else:\n",
    "            print(f\"The file {file_path} does not exist.\")\n",
    "\n",
    "    def copy_files(self, source_dir, dest_dir):\n",
    "        files_to_copy = ['SaveProfile.sav', 'SaveProfile.susres.sav', 'SaveProfile.susresvalid.sav']\n",
    "\n",
    "        for file in files_to_copy:\n",
    "            source_path = os.path.join(source_dir, file)\n",
    "            dest_path = os.path.join(dest_dir, file)\n",
    "            shutil.copy(source_path, dest_path)\n",
    "            print(f\"File '{file}' copied to '{dest_dir}'\")\n",
    "\n",
    "    def save_current_game(self, current_saved_timestamp):\n",
    "        timestamp = current_saved_timestamp.strftime(\"%Y-%m-%d_%H-%M-%S\")\n",
    "        folder_name = f\"save_{timestamp}\"\n",
    "        folder_path = os.path.join(self.backup_folder, folder_name)\n",
    "\n",
    "        if not os.path.exists(folder_path):\n",
    "            os.makedirs(folder_path)\n",
    "            message = f\"Folder '{folder_name}' created. Game saved!\"\n",
    "\n",
    "            source_dir = os.path.join(self.returnal_folder, 'SaveGames')\n",
    "            dest_dir = folder_path\n",
    "            self.copy_files(source_dir, dest_dir)\n",
    "        else:\n",
    "            message = f\"Folder '{folder_name}' already exists. Game not saved.\"\n",
    "\n",
    "        return message\n",
    "\n",
    "    def load_saved_game(self, savegame_folder):\n",
    "        if os.path.exists(savegame_folder):\n",
    "            dest_dir = os.path.join(self.returnal_folder, 'SaveGames')\n",
    "            source_dir = savegame_folder\n",
    "            self.copy_files(source_dir, dest_dir)\n",
    "        else:\n",
    "            print('error, no se pudo loadear')\n",
    "\n",
    "class ReturnalApp:\n",
    "    def __init__(self, returnal_game):\n",
    "        self.returnal_game = returnal_game\n",
    "        self.window = tk.Tk()\n",
    "        self.window.title(\"Returnal Load/Save v0.1\")\n",
    "\n",
    "        self.save_button = tk.Button(self.window, text=\"Save Game\",width=20, height=2, command=self.save_game)\n",
    "        self.load_button = tk.Button(self.window, text=\"Load Game\",width=20, height=2, command=self.load_game)\n",
    "        self.exit_button = tk.Button(self.window, text=\"Exit\", command=self.exit_app)\n",
    "\n",
    "        self.backup_listbox = tk.Listbox(self.window,width=50, height=10)\n",
    "\n",
    "        self.output_text = tk.Text(self.window,width=50, height=10)\n",
    "\n",
    "        backup_folders = os.listdir(self.returnal_game.backup_folder)\n",
    "        for folder_name in backup_folders:\n",
    "            self.backup_listbox.insert(tk.END, folder_name)\n",
    "\n",
    "        self.save_button.pack(side=\"top\")\n",
    "        self.load_button.pack(side=\"top\")\n",
    "        self.backup_listbox.pack()\n",
    "        self.output_text.pack()\n",
    "        self.exit_button.pack()\n",
    "\n",
    "    def save_game(self):\n",
    "        current_saved_time = self.returnal_game.check_current_saved()\n",
    "        message = self.returnal_game.save_current_game(current_saved_time)\n",
    "        self.output_text.insert(tk.END, f\"{message}\\n\")\n",
    "        \n",
    "    def load_game(self):\n",
    "        selection = self.backup_listbox.curselection()\n",
    "        if selection:\n",
    "            index = selection[0]\n",
    "            folder_name = self.backup_listbox.get(index)\n",
    "            folder_path = os.path.join(self.returnal_game.backup_folder, folder_name)\n",
    "            self.returnal_game.load_saved_game(folder_path)\n",
    "            self.output_text.insert(tk.END, f\"Game loaded from {folder_path}.\\n\")\n",
    "        else:\n",
    "            self.output_text.insert(tk.END, \"Please select a backup folder to load.\\n\")\n",
    "\n",
    "    def exit_app(self):\n",
    "        self.window.destroy()\n",
    "\n",
    "    def run(self):\n",
    "        self.window.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "1513e99b-8a5a-42dd-a803-e59b4c30e474",
   "metadata": {},
   "outputs": [],
   "source": [
    "returnal_game = ReturnalGame()\n",
    "returnal_app = ReturnalApp(returnal_game)\n",
    "returnal_app.run()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
